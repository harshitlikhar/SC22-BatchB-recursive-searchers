{"backend_state":"running","connection_file":"/projects/384affd7-8fb5-487a-a2bf-30e2102843d9/.local/share/jupyter/runtime/kernel-28602950-927a-454f-a5ea-7351569be90c.json","kernel":"ds_env","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.13"}},"trust":true,"type":"settings"}
{"cell_type":"code","end":1657637297040,"exec_count":19,"id":"fa5058","input":"import pandas as pd # Data manipulation\nimport numpy as np # mathemetical operations\nimport seaborn as sns # Data visualization\nimport matplotlib.pyplot as plt # Data visualization\nimport plotly.express as px # Data visualization\n\nfrom sklearn.ensemble import RandomForestClassifier as rfc\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.metrics import accuracy_score,recall_score,plot_precision_recall_curve, plot_roc_curve, ConfusionMatrixDisplay, auc, roc_auc_score, classification_report, confusion_matrix\nfrom sklearn.datasets import make_classification as mc\nfrom sklearn.preprocessing import MinMaxScaler,StandardScaler\nfrom sklearn.model_selection import train_test_split,GridSearchCV,KFold,cross_val_score\nfrom sklearn import metrics\nfrom sklearn import tree\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.svm import SVC\nimport graphviz\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nfrom subprocess import check_output\nimport xgboost as xgb\nfrom xgboost import XGBClassifier","kernel":"ds_env","pos":6,"start":1657637297029,"state":"done","type":"cell"}
{"cell_type":"code","end":1657637398808,"exec_count":24,"id":"67a5a7","input":"churndf.info()","kernel":"ds_env","output":{"0":{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 20000 entries, 0 to 19999\nData columns (total 14 columns):\n #   Column           Non-Null Count  Dtype  \n---  ------           --------------  -----  \n 0   RowNumber        20000 non-null  int64  \n 1   CustomerId       20000 non-null  int64  \n 2   Surname          20000 non-null  object \n 3   CreditScore      20000 non-null  int64  \n 4   Geography        20000 non-null  object \n 5   Gender           20000 non-null  object \n 6   Age              20000 non-null  int64  \n 7   Tenure           20000 non-null  int64  \n 8   Balance          20000 non-null  float64\n 9   NumOfProducts    20000 non-null  int64  \n 10  HasCrCard        20000 non-null  int64  \n 11  IsActiveMember   20000 non-null  int64  \n 12  EstimatedSalary  20000 non-null  float64\n 13  Exited           20000 non-null  int64  \ndtypes: float64(2), int64(9), object(3)\nmemory usage: 2.1+ MB\n"}},"pos":11,"start":1657637398774,"state":"done","type":"cell"}
{"cell_type":"code","end":1657637400053,"exec_count":25,"id":"818577","input":"churndf.describe()","kernel":"ds_env","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>RowNumber</th>\n      <th>CustomerId</th>\n      <th>CreditScore</th>\n      <th>Age</th>\n      <th>Tenure</th>\n      <th>Balance</th>\n      <th>NumOfProducts</th>\n      <th>HasCrCard</th>\n      <th>IsActiveMember</th>\n      <th>EstimatedSalary</th>\n      <th>Exited</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>20000.000000</td>\n      <td>2.000000e+04</td>\n      <td>20000.000000</td>\n      <td>20000.000000</td>\n      <td>20000.000000</td>\n      <td>20000.000000</td>\n      <td>20000.00000</td>\n      <td>20000.000000</td>\n      <td>20000.000000</td>\n      <td>20000.000000</td>\n      <td>20000.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>5000.500000</td>\n      <td>1.569094e+07</td>\n      <td>650.528800</td>\n      <td>38.921800</td>\n      <td>5.012800</td>\n      <td>76485.889288</td>\n      <td>1.53020</td>\n      <td>0.705500</td>\n      <td>0.515100</td>\n      <td>100090.239881</td>\n      <td>0.203700</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>2886.823503</td>\n      <td>7.193439e+04</td>\n      <td>96.650882</td>\n      <td>10.487544</td>\n      <td>2.892102</td>\n      <td>62395.845170</td>\n      <td>0.58164</td>\n      <td>0.455829</td>\n      <td>0.499784</td>\n      <td>57509.054966</td>\n      <td>0.402759</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>1.000000</td>\n      <td>1.556570e+07</td>\n      <td>350.000000</td>\n      <td>18.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>1.00000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>11.580000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>2500.750000</td>\n      <td>1.562853e+07</td>\n      <td>584.000000</td>\n      <td>32.000000</td>\n      <td>3.000000</td>\n      <td>0.000000</td>\n      <td>1.00000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>51002.110000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>5000.500000</td>\n      <td>1.569074e+07</td>\n      <td>652.000000</td>\n      <td>37.000000</td>\n      <td>5.000000</td>\n      <td>97198.540000</td>\n      <td>1.00000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>100193.915000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>7500.250000</td>\n      <td>1.575323e+07</td>\n      <td>718.000000</td>\n      <td>44.000000</td>\n      <td>7.000000</td>\n      <td>127644.240000</td>\n      <td>2.00000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>149388.247500</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>10000.000000</td>\n      <td>1.581569e+07</td>\n      <td>850.000000</td>\n      <td>92.000000</td>\n      <td>10.000000</td>\n      <td>250898.090000</td>\n      <td>4.00000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>199992.480000</td>\n      <td>1.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"          RowNumber    CustomerId   CreditScore           Age        Tenure  \\\ncount  20000.000000  2.000000e+04  20000.000000  20000.000000  20000.000000   \nmean    5000.500000  1.569094e+07    650.528800     38.921800      5.012800   \nstd     2886.823503  7.193439e+04     96.650882     10.487544      2.892102   \nmin        1.000000  1.556570e+07    350.000000     18.000000      0.000000   \n25%     2500.750000  1.562853e+07    584.000000     32.000000      3.000000   \n50%     5000.500000  1.569074e+07    652.000000     37.000000      5.000000   \n75%     7500.250000  1.575323e+07    718.000000     44.000000      7.000000   \nmax    10000.000000  1.581569e+07    850.000000     92.000000     10.000000   \n\n             Balance  NumOfProducts     HasCrCard  IsActiveMember  \\\ncount   20000.000000    20000.00000  20000.000000    20000.000000   \nmean    76485.889288        1.53020      0.705500        0.515100   \nstd     62395.845170        0.58164      0.455829        0.499784   \nmin         0.000000        1.00000      0.000000        0.000000   \n25%         0.000000        1.00000      0.000000        0.000000   \n50%     97198.540000        1.00000      1.000000        1.000000   \n75%    127644.240000        2.00000      1.000000        1.000000   \nmax    250898.090000        4.00000      1.000000        1.000000   \n\n       EstimatedSalary        Exited  \ncount     20000.000000  20000.000000  \nmean     100090.239881      0.203700  \nstd       57509.054966      0.402759  \nmin          11.580000      0.000000  \n25%       51002.110000      0.000000  \n50%      100193.915000      0.000000  \n75%      149388.247500      0.000000  \nmax      199992.480000      1.000000  "},"exec_count":25}},"pos":13,"start":1657637399975,"state":"done","type":"cell"}
{"cell_type":"code","end":1657637402872,"exec_count":27,"id":"3fe57b","input":"corr = churndf.corr()\nplt.figure(figsize=(10,10))#size of our heatmap\nsns.heatmap(corr, cmap='YlGnBu', annot = True).set_title('Correlation between variables',fontdict= { 'fontsize': 14, 'fontweight':'bold'});#command to create the heatmap","kernel":"ds_env","output":{"0":{"data":{"image/png":"c00d39f3bd9d38e79335fa2b4499cd984cf885a6","text/plain":"<Figure size 720x720 with 2 Axes>"},"metadata":{"needs_background":"light"}}},"pos":17,"start":1657637402193,"state":"done","type":"cell"}
{"cell_type":"code","end":1657637410609,"exec_count":29,"id":"9f5a3b","input":"plt.figure(figsize=(18,8))#size of the plot\nsns.scatterplot(x=\"Age\", y=\"Balance\", hue='Exited', data=churndf) #Importing three variables\nplt.title('Relation of Exited, Age and Balance', fontsize=15, fontweight='bold') #Named and colored the plot\nplt.xticks(fontsize=16)#size of x\nplt.yticks(fontsize=16)#size of y\nplt.show()#print the plot","kernel":"ds_env","output":{"0":{"data":{"image/png":"56d16a9946b9c9a3d1b4dc6bc1cb464e2d0370fa","text/plain":"<Figure size 1296x576 with 1 Axes>"}}},"pos":30,"scrolled":true,"start":1657637409636,"state":"done","type":"cell"}
{"cell_type":"code","end":1657637414802,"exec_count":31,"id":"7bb385","input":"dummies = pd.get_dummies(churndf[\"Gender\"])#making it show male as 0, female as 1\ndummies.head()","kernel":"ds_env","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Female</th>\n      <th>Male</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"   Female  Male\n0       1     0\n1       1     0\n2       1     0\n3       1     0\n4       1     0"},"exec_count":31}},"pos":37,"start":1657637414793,"state":"done","type":"cell"}
{"cell_type":"code","end":1657637415709,"exec_count":32,"id":"a5aa89","input":"churndf[\"Gender\"] = dummies[\"Male\"]#? idk what we did here\nchurndf.head()","kernel":"ds_env","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>CreditScore</th>\n      <th>Geography</th>\n      <th>Gender</th>\n      <th>Age</th>\n      <th>Tenure</th>\n      <th>Balance</th>\n      <th>NumOfProducts</th>\n      <th>HasCrCard</th>\n      <th>IsActiveMember</th>\n      <th>EstimatedSalary</th>\n      <th>Exited</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>619</td>\n      <td>France</td>\n      <td>0</td>\n      <td>42</td>\n      <td>2</td>\n      <td>0.00</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>101348.88</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>608</td>\n      <td>Spain</td>\n      <td>0</td>\n      <td>41</td>\n      <td>1</td>\n      <td>83807.86</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>112542.58</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>502</td>\n      <td>France</td>\n      <td>0</td>\n      <td>42</td>\n      <td>8</td>\n      <td>159660.80</td>\n      <td>3</td>\n      <td>1</td>\n      <td>0</td>\n      <td>113931.57</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>699</td>\n      <td>France</td>\n      <td>0</td>\n      <td>39</td>\n      <td>1</td>\n      <td>0.00</td>\n      <td>2</td>\n      <td>0</td>\n      <td>0</td>\n      <td>93826.63</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>850</td>\n      <td>Spain</td>\n      <td>0</td>\n      <td>43</td>\n      <td>2</td>\n      <td>125510.82</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>79084.10</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"   CreditScore Geography  Gender  Age  Tenure    Balance  NumOfProducts  \\\n0          619    France       0   42       2       0.00              1   \n1          608     Spain       0   41       1   83807.86              1   \n2          502    France       0   42       8  159660.80              3   \n3          699    France       0   39       1       0.00              2   \n4          850     Spain       0   43       2  125510.82              1   \n\n   HasCrCard  IsActiveMember  EstimatedSalary  Exited  \n0          1               1        101348.88       1  \n1          0               1        112542.58       0  \n2          1               0        113931.57       1  \n3          0               0         93826.63       0  \n4          1               1         79084.10       0  "},"exec_count":32}},"pos":38,"start":1657637415693,"state":"done","type":"cell"}
{"cell_type":"code","end":1657637416222,"exec_count":33,"id":"50b0ff","input":"dummies2 = pd.get_dummies(churndf[\"Geography\"])#made it identify each country\ndummies2.head()","kernel":"ds_env","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>France</th>\n      <th>Germany</th>\n      <th>Spain</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"   France  Germany  Spain\n0       1        0      0\n1       0        0      1\n2       1        0      0\n3       1        0      0\n4       0        0      1"},"exec_count":33}},"pos":39,"scrolled":true,"start":1657637416202,"state":"done","type":"cell"}
{"cell_type":"code","end":1657637417000,"exec_count":34,"id":"73c7fa","input":"#making it to identify those countries as numbers\nchurndf['France'] = dummies2['France']\nchurndf['Spain'] = dummies2['Spain']\nchurndf['Germany'] = dummies2['Germany']","kernel":"ds_env","pos":40,"start":1657637416987,"state":"done","type":"cell"}
{"cell_type":"code","end":1657637417950,"exec_count":35,"id":"3597c7","input":"churndf.drop(['Geography'],axis = 1, inplace = True)#idk","kernel":"ds_env","pos":41,"start":1657637417937,"state":"done","type":"cell"}
{"cell_type":"code","end":1657637418923,"exec_count":36,"id":"9bc1d5","input":"X = churndf.loc[:, churndf.columns != \"Exited\"]\nY = churndf['Exited']","kernel":"ds_env","pos":42,"start":1657637418920,"state":"done","type":"cell"}
{"cell_type":"code","end":1657637420761,"exec_count":37,"id":"376c70","input":"x_train, x_test, y_train, y_test = train_test_split(X, Y, test_size=0.2, random_state=42, stratify = Y)","kernel":"ds_env","pos":44,"start":1657637420747,"state":"done","type":"cell"}
{"cell_type":"code","end":1657637421834,"exec_count":38,"id":"fdad31","input":"scaler = StandardScaler()\n\nnum_cols = ['EstimatedSalary','Balance','Age','CreditScore']\n\nfor i in num_cols:\n    x = scaler.fit(x_train[[i]])\n    x_train[i] = x.transform(x_train[[i]])\n    x_test[i] = x.transform(x_test[[i]])","kernel":"ds_env","pos":45,"start":1657637421792,"state":"done","type":"cell"}
{"cell_type":"code","end":1657637424567,"exec_count":39,"id":"7f83fa","input":"log = LogisticRegression()\nlog.fit(x_train, y_train)","kernel":"ds_env","output":{"0":{"data":{"text/html":"<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LogisticRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LogisticRegression</label><div class=\"sk-toggleable__content\"><pre>LogisticRegression()</pre></div></div></div></div></div>","text/plain":"LogisticRegression()"},"exec_count":39}},"pos":48,"start":1657637424475,"state":"done","type":"cell"}
{"cell_type":"code","end":1657637429672,"exec_count":40,"id":"49e3d8","input":"parameters = {\n    'penalty' : ['l1','l2','elasticnet'], \n    'C'       : [0.001,0.01,0.1,1,10,100],\n    'solver'  : ['newton-cg', 'lbfgs', 'liblinear'],}\n\ngrid={\"C\":np.logspace(-3,3,7), \"penalty\":[\"l1\",\"l2\"]}\nlog = LogisticRegression()\nlog_cv=GridSearchCV(log,grid,cv=10)\nlog_cv.fit(x_train,y_train)\n\nprint(\"tuned hpyerparameters :(best parameters) \",log_cv.best_params_)\nprint(\"accuracy :\",log_cv.best_score_)","kernel":"ds_env","output":{"0":{"name":"stdout","text":"tuned hpyerparameters :(best parameters)  {'C': 0.1, 'penalty': 'l2'}\naccuracy : 0.8106875\n"}},"pos":49,"start":1657637425386,"state":"done","type":"cell"}
{"cell_type":"code","end":1657637429714,"exec_count":41,"id":"b6bc54","input":"y_pred_log = log_cv.predict(x_test)\ny_pred_log","kernel":"ds_env","output":{"0":{"data":{"text/plain":"array([0, 0, 0, ..., 0, 0, 0])"},"exec_count":41}},"pos":50,"start":1657637429679,"state":"done","type":"cell"}
{"cell_type":"code","end":1657637429795,"exec_count":42,"id":"932d93","input":"recall_score(y_test, y_pred_log)","kernel":"ds_env","output":{"0":{"data":{"text/plain":"0.2098159509202454"},"exec_count":42}},"pos":51,"start":1657637429725,"state":"done","type":"cell"}
{"cell_type":"code","end":1657637430250,"exec_count":43,"id":"d1ac5b","input":"sns.heatmap(confusion_matrix(y_test, y_pred_log), annot=True, fmt='g')","kernel":"ds_env","output":{"0":{"data":{"text/plain":"<AxesSubplot:>"},"exec_count":43},"1":{"data":{"image/png":"260b6258be895ac2666914474ca8914eb0aded49","text/plain":"<Figure size 936x360 with 2 Axes>"}}},"pos":52,"start":1657637429851,"state":"done","type":"cell"}
{"cell_type":"code","end":1657637430272,"exec_count":44,"id":"f9b4e9","input":"log_reg_cf = confusion_matrix(y_test, y_pred_log)","kernel":"ds_env","pos":53,"start":1657637430267,"state":"done","type":"cell"}
{"cell_type":"code","end":1657637430293,"exec_count":45,"id":"221048","input":"log_reg_cf","kernel":"ds_env","output":{"0":{"data":{"text/plain":"array([[3085,  100],\n       [ 644,  171]])"},"exec_count":45}},"pos":54,"start":1657637430286,"state":"done","type":"cell"}
{"cell_type":"code","end":1657637431343,"exec_count":46,"id":"4ab29a","input":"fig = px.imshow(log_reg_cf,text_auto=True, labels=dict(x=\"Predicted Values\", y=\"Actual Values\"), \n                x=['Not Churn','Churn'],\n                y=['Not Churn','Churn'],\n                color_continuous_scale=\"Blues\")\nfig.update_layout(height=600, width=800, title_text=\"Confusion Matrix: Support Vector Machine\")\nfig.show()\nfig.write_html(\"log_reg_cf.html\")","kernel":"ds_env","output":{"0":{"data":{"iframe":"b05c987076e6adadcd95e60dca4fdf2c53b4ac30"}}},"pos":55,"start":1657637430916,"state":"done","type":"cell"}
{"cell_type":"code","end":1657637881541,"exec_count":57,"id":"7e4ccf","input":"fig = px.scatter(x=\"Age\", y=\"Balance\", color = \"Exited\", data_frame=churndf)\nfig.update_layout(height=600, width=800, title_text=\"Scatterplot Coralation map of Age, Balance, and Churned\")\nfig.show()\nfig.write_html(\"Scatplt,Age,Bal,Chur.html\")","kernel":"ds_env","output":{"0":{"data":{"iframe":"7055e44581b96d081121baa275f559f59db59454"}}},"pos":31,"start":1657637881173,"state":"done","type":"cell"}
{"cell_type":"code","end":1657646077056,"exec_count":78,"id":"4b5528","input":"churndf = pd.read_csv('Churn_Modelling.csv')","kernel":"ds_env","pos":8,"start":1657646076937,"state":"done","type":"cell"}
{"cell_type":"code","end":1657646078016,"exec_count":79,"id":"6ebd65","input":"churndf.head()#Show first 5 rows","kernel":"ds_env","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>RowNumber</th>\n      <th>CustomerId</th>\n      <th>Surname</th>\n      <th>CreditScore</th>\n      <th>Geography</th>\n      <th>Gender</th>\n      <th>Age</th>\n      <th>Tenure</th>\n      <th>Balance</th>\n      <th>NumOfProducts</th>\n      <th>HasCrCard</th>\n      <th>IsActiveMember</th>\n      <th>EstimatedSalary</th>\n      <th>Exited</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>15634602</td>\n      <td>Hargrave</td>\n      <td>619</td>\n      <td>France</td>\n      <td>Female</td>\n      <td>42</td>\n      <td>2</td>\n      <td>0.00</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>101348.88</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>15647311</td>\n      <td>Hill</td>\n      <td>608</td>\n      <td>Spain</td>\n      <td>Female</td>\n      <td>41</td>\n      <td>1</td>\n      <td>83807.86</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>112542.58</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>15619304</td>\n      <td>Onio</td>\n      <td>502</td>\n      <td>France</td>\n      <td>Female</td>\n      <td>42</td>\n      <td>8</td>\n      <td>159660.80</td>\n      <td>3</td>\n      <td>1</td>\n      <td>0</td>\n      <td>113931.57</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>15701354</td>\n      <td>Boni</td>\n      <td>699</td>\n      <td>France</td>\n      <td>Female</td>\n      <td>39</td>\n      <td>1</td>\n      <td>0.00</td>\n      <td>2</td>\n      <td>0</td>\n      <td>0</td>\n      <td>93826.63</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>15737888</td>\n      <td>Mitchell</td>\n      <td>850</td>\n      <td>Spain</td>\n      <td>Female</td>\n      <td>43</td>\n      <td>2</td>\n      <td>125510.82</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>79084.10</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"   RowNumber  CustomerId   Surname  CreditScore Geography  Gender  Age  \\\n0          1    15634602  Hargrave          619    France  Female   42   \n1          2    15647311      Hill          608     Spain  Female   41   \n2          3    15619304      Onio          502    France  Female   42   \n3          4    15701354      Boni          699    France  Female   39   \n4          5    15737888  Mitchell          850     Spain  Female   43   \n\n   Tenure    Balance  NumOfProducts  HasCrCard  IsActiveMember  \\\n0       2       0.00              1          1               1   \n1       1   83807.86              1          0               1   \n2       8  159660.80              3          1               0   \n3       1       0.00              2          0               0   \n4       2  125510.82              1          1               1   \n\n   EstimatedSalary  Exited  \n0        101348.88       1  \n1        112542.58       0  \n2        113931.57       1  \n3         93826.63       0  \n4         79084.10       0  "},"exec_count":79}},"pos":9,"start":1657646077970,"state":"done","type":"cell"}
{"cell_type":"code","end":1657646081797,"exec_count":80,"id":"259fb0","input":"columns_to_drop = ['RowNumber', 'CustomerId', 'Surname']#Dropping three exact colums\nchurndf.drop(columns_to_drop, axis=1, inplace = True)#Command to drop","kernel":"ds_env","pos":15,"start":1657646081793,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"017660","input":"from sklearn import svm\n\nparam_grid = {'C': [0.001,0.01,0.1, 1, 10],\n              'gamma': [1, 0.01, 0.001],\n              'kernel': ['polynomial','rbf']}\n \n\ngrid = GridSearchCV(svm.SVC(), param_grid, verbose = 3)\ngrid.fit(x_train, y_train)","pos":102,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"04d21c","input":"print(classification_report(y_test, y_xgboost))","pos":95,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"06f5ad","input":"xgbooster.fit(x_train, y_train)","pos":93,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"193c9e","input":"sns.heatmap(confusion_matrix(y_test, y_pred_rfgs), annot=True, fmt='g')","pos":90,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"253340","input":"dtree_grid_search(y_test,y_pred_dt,6)","pos":62,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"2daea3","input":"print(classification_report(y_test,gradient_booster.predict(x_test)))","pos":72,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"45a34b","input":"","pos":67,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"54d9a2","input":"y_test_xg = grid_search.predict(x_test)","pos":98,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"8fcec2","input":"xgbooster = XGBClassifier()\n\nparamatersxg = {\n    'max_depth': [3,6,8],\n    'n_estimators': [75,100,150],\n    'learning_rate': [0.1, 0.01, 0.05],\n    'gamma': [0.10,3.2,12.8],\n    'min_child_weight': [1, 5],\n    'subsample': [0.6, 0.8],\n}\n\ngrid_search = GridSearchCV(\n    estimator=xgbooster,\n    param_grid=paramatersxg,\n    cv = 3,\n    verbose=True\n)","pos":96,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"95ae77","input":"svm_hyper_pred = grid.predict(x_test)\nprint(classification_report(svm_hyper_pred,y_test))","pos":103,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"ad5a27","input":"y_pred_rfgs = CV_rfc.predict(x_test)","pos":86,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"c2ac90","input":"# treeClassifier = DecisionTreeClassifier(criterion = \"gini\", max_depth = 14, max_features = 9, min_samples_leaf = 1 )\n\ndata = tree.export_graphviz(treeClassifier, class_names=['0', '1'], out_file=None)\ngraph = graphviz.Source(data)\ngraph","pos":63,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"c6e503","input":"print(classification_report(y_test, y_test_xg))","pos":99,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"c82895","input":"y_xgboost = xgbooster.predict(x_test)","pos":94,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"d1ce7d","input":"xgbooster = XGBClassifier()","pos":92,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"d72b36","input":"grid_search.fit(x_train, y_train)","pos":97,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"de049f","input":"","pos":105,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"e46666","input":"gradient_booster = GradientBoostingClassifier(learning_rate=0.1)","pos":70,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"f4aa5e","input":"print(accuracy_score(y_pred_rfgs, y_test))","pos":87,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"f9b61c","input":"gradient_booster.fit(x_train,y_train)","pos":71,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"fe38af","input":"parameters = {\n    \"loss\":[\"deviance\"],\n    \"learning_rate\": [0.01, 0.025, 0.05, 0.075, 0.1, 0.15, 0.2],\n    \"min_samples_split\": np.linspace(0.1, 0.5, 12),\n    \"min_samples_leaf\": np.linspace(0.1, 0.5, 12),\n    \"max_depth\":[3,5,8],\n    \"max_features\":[\"log2\",\"sqrt\"]}\n\nclf = GridSearchCV(GradientBoostingClassifier(), parameters, cv=10, n_jobs=-1)\nclf.fit(x_train, y_train)\nprint(clf.score(x_train, y_train))\nprint(clf.best_params_)","pos":69,"type":"cell"}
{"cell_type":"code","exec_count":28,"id":"b3bbf9","input":"fig, axes = plt.subplots(1,4)#amount of plots\nsns.set({'figure.figsize':(13,5)});#size of plots\n#codes to create plots ↓↓↓\nsns.boxplot(data = churndf, x = 'Exited', y = 'Age', ax = axes[0], palette = 'Greens').set_title('Age to Exited',fontdict= { 'fontsize': 14, 'fontweight':'bold'})\nsns.boxplot(data = churndf, x = 'Exited', y = 'EstimatedSalary', ax = axes [1], palette = 'Reds').set_title('Estimated Salary to Exited',fontdict= { 'fontsize': 14, 'fontweight':'bold'})\nsns.boxplot(data = churndf, x = 'Exited', y = 'Balance', ax = axes [2], palette = 'Oranges').set_title('Balance to Exited',fontdict= { 'fontsize': 14, 'fontweight':'bold'})\nsns.boxplot(data = churndf, x = 'Exited', y = 'Tenure', ax = axes [3], palette = 'Blues').set_title('Tenure to Exited',fontdict= { 'fontsize': 14, 'fontweight':'bold'});\nfig.tight_layout() #print plots","kernel":"ds_env","output":{"0":{"data":{"image/png":"1e326762718e103af88c65b34971e96c314d4f4d","text/plain":"<Figure size 432x288 with 4 Axes>"},"metadata":{"needs_background":"light"}}},"pos":28,"scrolled":true,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":31,"id":"36b7ed","input":"print(classification_report(y_test, y_pred_log))","output":{"0":{"name":"stdout","output_type":"stream","text":"              precision    recall  f1-score   support\n\n           0       0.83      0.97      0.89      3185\n           1       0.63      0.21      0.31       815\n\n    accuracy                           0.81      4000\n   macro avg       0.73      0.59      0.60      4000\nweighted avg       0.79      0.81      0.77      4000\n\n"}},"pos":57,"type":"cell"}
{"cell_type":"code","exec_count":31,"id":"5e6996","input":"def dtree_grid_search(y_test,y_pred_dt,nfolds):\n    #create a dictionary of all values we want to test\n    param_grid = {\"max_features\": [1,3,4,5,7,8,9], \"min_samples_leaf\": [1,3,4,5,6,7],'criterion':['gini','entropy'],'max_depth': np.arange(3, 15)}\n    # decision tree model\n    dtree_model=DecisionTreeClassifier()\n    #use gridsearch to test all values\n    dtree_gscv = GridSearchCV(dtree_model, param_grid, cv=nfolds)\n    #fit model to data\n    dtree_gscv.fit(x_train, y_train)\n    return dtree_gscv.best_params_","pos":59,"type":"cell"}
{"cell_type":"code","exec_count":32,"id":"d7560a","input":"treeClassifier = DecisionTreeClassifier(criterion = \"gini\", max_depth = 14, max_features = 9, min_samples_leaf = 1 )\ntreeClassifier.fit(x_train, y_train)\ny_pred_dt = treeClassifier.predict(x_test)","pos":60,"type":"cell"}
{"cell_type":"code","exec_count":33,"id":"b6d296","input":"y_pred_dt = treeClassifier.predict(x_test)","pos":61,"type":"cell"}
{"cell_type":"code","exec_count":41,"id":"408103","input":"clf = rfc(n_estimators = 100)\nclf.fit(x_train, y_train)","output":{"0":{"data":{"text/html":"<style>#sk-container-id-2 {color: black;background-color: white;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomForestClassifier()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" checked><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomForestClassifier</label><div class=\"sk-toggleable__content\"><pre>RandomForestClassifier()</pre></div></div></div></div></div>","text/plain":"RandomForestClassifier()"},"execution_count":41,"metadata":{},"output_type":"execute_result"}},"pos":75,"type":"cell"}
{"cell_type":"code","exec_count":42,"id":"8a1bb6","input":"y_pred_clf = clf.predict(x_test)","pos":76,"type":"cell"}
{"cell_type":"code","exec_count":43,"id":"234127","input":"from sklearn.metrics import accuracy_score","pos":77,"type":"cell"}
{"cell_type":"code","exec_count":44,"id":"f47905","input":"print(\"ACCURACY OF THE MODEL: \", accuracy_score(y_test, y_pred_clf))","output":{"0":{"name":"stdout","output_type":"stream","text":"ACCURACY OF THE MODEL:  0.971\n"}},"pos":78,"type":"cell"}
{"cell_type":"code","exec_count":45,"id":"416539","input":"sns.heatmap(confusion_matrix(y_test, y_pred_clf), annot=True, fmt='g')","output":{"0":{"data":{"text/plain":"<AxesSubplot:>"},"execution_count":45,"metadata":{},"output_type":"execute_result"},"1":{"data":{"image/png":"","text/plain":"<Figure size 432x288 with 2 Axes>"},"execution_count":45,"metadata":{"needs_background":"light"},"output_type":"execute_result"}},"pos":79,"type":"cell"}
{"cell_type":"code","exec_count":46,"id":"fcd576","input":"recall_score(y_test, y_pred_clf)","output":{"0":{"data":{"text/plain":"0.894478527607362"},"execution_count":46,"metadata":{},"output_type":"execute_result"}},"pos":80,"type":"cell"}
{"cell_type":"code","exec_count":47,"id":"51baa0","input":"fig, axes = plt.subplots(3,2)#amount of plots\nsns.set({'figure.figsize':(12,20)});#size of plots\n#code to make plots ↓↓↓\nsns.countplot(data = churndf, x = 'Gender', hue = 'Exited', ax = axes [0,0], palette = 'Purples').set_title('Gender to exited',fontdict= { 'fontsize': 14, 'fontweight':'bold'})\nsns.countplot(data = churndf, x = 'HasCrCard', hue = 'Exited', ax = axes [0,1], palette = 'Reds').set_title('Has Credit Card or not to exited',fontdict= { 'fontsize': 14, 'fontweight':'bold'})\nsns.countplot(data = churndf, x = 'IsActiveMember', hue = 'Exited', ax = axes [1,0], palette = 'Oranges').set_title('Active or not to exited',fontdict= { 'fontsize': 14, 'fontweight':'bold'})\nsns.countplot(data = churndf, x = 'NumOfProducts', hue = 'Exited', ax = axes [1,1], palette = 'Blues').set_title('Products to exited',fontdict= { 'fontsize': 14, 'fontweight':'bold'})\nsns.countplot(data=churndf, x = 'Geography', hue = 'Exited', ax = axes[2,0], palette = 'Greens').set_title('Countries in relation to Exited',fontdict= { 'fontsize': 14, 'fontweight':'bold'})\nsns.countplot(data = churndf, x = 'Geography', ax = axes[2,1], palette = 'Purples').set_title('Countries',fontdict= { 'fontsize': 14, 'fontweight':'bold'})\nfig.tight_layout();#print plots","output":{"0":{"data":{"image/png":"","text/plain":"<Figure size 864x1440 with 6 Axes>"},"execution_count":47,"metadata":{},"output_type":"execute_result"}},"pos":22,"type":"cell"}
{"cell_type":"code","exec_count":47,"id":"70edb9","input":"print(classification_report(y_test, y_pred_clf))","output":{"0":{"name":"stdout","output_type":"stream","text":"              precision    recall  f1-score   support\n\n           0       0.97      0.99      0.98      3185\n           1       0.96      0.89      0.93       815\n\n    accuracy                           0.97      4000\n   macro avg       0.97      0.94      0.95      4000\nweighted avg       0.97      0.97      0.97      4000\n\n"}},"pos":81,"type":"cell"}
{"cell_type":"code","exec_count":48,"id":"1ef418","input":"# Number of trees in random forest\nn_estimators = [100,200,300]\n# Maximum number of levels in tree\nmax_depth = [6,10,20]\n# Minimum number of samples required to split a node\nmin_samples_split = [5, 10]\n# Minimum number of samples required at each leaf node\nmin_samples_leaf = [1, 2, 4]\n# Method of selecting samples for training each tree\nbootstrap = [True, False]\n# Create the random grid\nparam_grid = {'n_estimators': n_estimators,\n               'max_features': ['sqrt'],\n               'max_depth': max_depth,\n               'min_samples_split': min_samples_split,\n               'min_samples_leaf': min_samples_leaf,\n               'bootstrap': bootstrap}","pos":83,"type":"cell"}
{"cell_type":"code","exec_count":49,"id":"9f26be","input":"CV_rfc = GridSearchCV(estimator = clf, param_grid=param_grid, cv= 5)","pos":84,"type":"cell"}
{"cell_type":"code","exec_count":53,"id":"9bf571","input":"","kernel":"ds_env","output":{"0":{"ename":"SyntaxError","evalue":"cannot assign to function call (2435112235.py, line 1)","traceback":["\u001b[0;36m  Input \u001b[0;32mIn [53]\u001b[0;36m\u001b[0m\n\u001b[0;31m    fg = px.scatter(x=\"Age\", y=\"Balance\", color = \"Exited\", data_frame=churndf), color_continuous_scale= 'Blues'\u001b[0m\n\u001b[0m         ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m cannot assign to function call\n"]}},"pos":32,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":61,"id":"5f8c72","input":"print(classification_report(y_test, y_pred_dt))","output":{"0":{"name":"stdout","output_type":"stream","text":"              precision    recall  f1-score   support\n\n           0       0.93      0.96      0.95      3185\n           1       0.83      0.73      0.78       815\n\n    accuracy                           0.92      4000\n   macro avg       0.88      0.85      0.86      4000\nweighted avg       0.91      0.92      0.91      4000\n\n"}},"pos":64,"type":"cell"}
{"cell_type":"code","exec_count":61,"id":"bbe88b","input":"CV_rfc.fit(x_train, y_train)","pos":85,"type":"cell"}
{"cell_type":"code","exec_count":62,"id":"23d3a2","input":"sns.heatmap(confusion_matrix(y_test, y_pred_dt), annot=True, fmt='g')","output":{"0":{"data":{"text/plain":"<AxesSubplot:>"},"execution_count":62,"metadata":{},"output_type":"execute_result"},"1":{"data":{"image/png":"","text/plain":"<Figure size 432x288 with 2 Axes>"},"execution_count":62,"metadata":{"needs_background":"light"},"output_type":"execute_result"}},"pos":65,"type":"cell"}
{"cell_type":"code","exec_count":79,"id":"47dace","input":"print(classification_report(y_test, y_pred_rfgs))","output":{"0":{"name":"stdout","output_type":"stream","text":"              precision    recall  f1-score   support\n\n           0       0.97      0.99      0.98      3185\n           1       0.96      0.90      0.92       815\n\n    accuracy                           0.97      4000\n   macro avg       0.96      0.94      0.95      4000\nweighted avg       0.97      0.97      0.97      4000\n\n"}},"pos":89,"type":"cell"}
{"cell_type":"code","exec_count":9,"id":"36d64a","input":"plt.figure(figsize=(9,5))#size of the graph\nax = sns.barplot(x='Exited', y='Exited', estimator=lambda x: len(x) / len(churndf) * 100, data=churndf, palette = 'Blues')#setting x and y to represent the info\nax.bar_label(ax.containers[0], fmt='%.f%%') #making bars to show the percentage\nax.set_ylabel('%')\nax.set_title('Percentage of exited to non-exited customers',fontdict= { 'fontsize': 14, 'fontweight':'bold'});#naming the graph","output":{"0":{"data":{"image/png":"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","text/plain":"<Figure size 648x360 with 1 Axes>"},"execution_count":9,"metadata":{"needs_background":"light"},"output_type":"execute_result"}},"pos":19,"type":"cell"}
{"cell_type":"code","id":"cd908f","input":"","pos":56,"type":"cell"}
{"cell_type":"markdown","id":"00d7d6","input":"- What features are significant in prediction the churn in a customer.\n- To suggest measure in order to improve the retention rate with respect to customer category.\n\n","pos":3,"type":"cell"}
{"cell_type":"markdown","id":"0d5181","input":"recall: 0.36\n","pos":100,"type":"cell"}
{"cell_type":"markdown","id":"1077d3","input":"#### Support Vector Classifier\n\n","pos":101,"type":"cell"}
{"cell_type":"markdown","id":"125195","input":"This bar graph shows our percentage of exited to non\\-exited customers. As shown, we have a large percentage of exited customers along with the opposite for non\\-exited customers.\n\n","pos":20,"type":"cell"}
{"cell_type":"markdown","id":"12de66","input":"#### Turning Categorical String columns into Numericals Classes\n\n","pos":36,"type":"cell"}
{"cell_type":"markdown","id":"27db62","input":"##### Creating count-plots for values that wouldn't be properly visualized by box plots due to being categorical.\n\n","pos":21,"type":"cell"}
{"cell_type":"markdown","id":"403c21","input":"###### GridSearchCV\n\n","pos":82,"type":"cell"}
{"cell_type":"markdown","id":"42c50b","input":"<h4> Goal</h4>\n\n","pos":2,"type":"cell"}
{"cell_type":"markdown","id":"49d234","input":"One of the most important applications of data science in the commercial sector is churn prediction. Its popularity stems from the fact that its impacts are more tangible to comprehend, and it plays a significant role in the company's overall revenues.\n\nChurn is described as \"when a client cancels a subscription to a service they have been utilizing\" in business terms. People cancelling Spotify/Netflix memberships are a regular example. So, based on their utilization of the service, Churn Prediction is effectively projecting which clients are most likely to cancel a subscription, i.e. 'leave a company.'\n\nFrom a business standpoint, obtaining this information is critical because recruiting new clients is generally more difficult and costly than retaining existing customers. As a result, the information acquired through Churn Prediction allows them to focus more on the customers who are most likely to leave.\n\n","pos":1,"type":"cell"}
{"cell_type":"markdown","id":"5017a3","input":"##### Drop unnecessary columns","pos":14,"type":"cell"}
{"cell_type":"markdown","id":"646888","input":"#### **XGboost**\n\n","pos":91,"type":"cell"}
{"cell_type":"markdown","id":"7335d0","input":"This scatter plot shows the relationship between the age and balance of the customers, and how that affects the number of people that have exited. \n\n","pos":33,"type":"cell"}
{"cell_type":"markdown","id":"7f1c59","input":"The box plots above show the relationship between multiple factors such as age, estimated salary, balance, and tenure, to whether they exited or not.\n\n","pos":29,"type":"cell"}
{"cell_type":"markdown","id":"7f5388","input":"#### **`Gradient Boosting Classifier`**\n\n","pos":68,"type":"cell"}
{"cell_type":"markdown","id":"82b8be","input":"#### Random Forest Classifier\n\n","pos":73,"type":"cell"}
{"cell_type":"markdown","id":"832121","input":"### Splitting the Data\n\n","pos":43,"type":"cell"}
{"cell_type":"markdown","id":"858a8b","input":"Recall : 0.90\n","pos":88,"type":"cell"}
{"cell_type":"markdown","id":"85c2f5","input":"1\\)Graph 1 shows the gender of the customer and whether or not they exited.\n\n2\\)Graph 2 shows whether or not the customer had a credit card or not when they exited.\n\n3\\)Graph 3 shows whether or not the customer that exited was an active member or not.\n\n4\\)Graph 4 shows the number of products a customer had compared to whether or not they exited.\n\n5\\)Graph 5 shows the country of the customer and whether or not the person exited.\n\n6\\)Shows the number of customers by country.\n\n","pos":26,"type":"cell"}
{"cell_type":"markdown","id":"8d133d","input":"##### Creating box-plots to examine the spread of our data among multiple variables.\n\n","pos":27,"type":"cell"}
{"cell_type":"markdown","id":"9a7d65","input":"### Model Evaluation \\- Recall:\n\n- SVM: 0.93\n- Random Forest: 0.90\n- Decision Tree: 0.73\n- XGboost: 0.65\n- Gradient Boosting: 0.50\n- Log Reg: 0.21\n- KNN: 0.16\n\n","pos":104,"type":"cell"}
{"cell_type":"markdown","id":"9ef73c","input":"##### Import Dataset\n\n","pos":7,"type":"cell"}
{"cell_type":"markdown","id":"a0b968","input":"#### Decision Tree Classifier\n\n","pos":58,"type":"cell"}
{"cell_type":"markdown","id":"a3e950","input":"This model uses the decision tree to predict customer churn. Through the use of gridsearchcv I was able to refine the model and make it more accurate.\n","pos":66,"type":"cell"}
{"cell_type":"markdown","id":"a49420","input":"> 1 = Churned\n>\n>\n> 0 = Not Churned\n\n","pos":4,"type":"cell"}
{"cell_type":"markdown","id":"a4bac4","input":"##### Summary","pos":34,"type":"cell"}
{"cell_type":"markdown","id":"b1deb5","input":"##### Column Statistics","pos":12,"type":"cell"}
{"cell_type":"markdown","id":"bd2248","input":"##### Assessing the proportions of our target value triggers to our defaults.\n\n","pos":18,"type":"cell"}
{"cell_type":"markdown","id":"c0b41a","input":"##### Dataset Info","pos":10,"type":"cell"}
{"cell_type":"markdown","id":"c83666","input":"### Modelling\n\n","pos":46,"type":"cell"}
{"cell_type":"markdown","id":"ca7941","input":"We use RFC in order to address the issue of overfitting that a single tree may exhibit by using multiple decision trees to vote on the most common classification. They're generally more accurate, though also more memory\\-consuming than single decision trees.\n\n","pos":74,"type":"cell"}
{"cell_type":"markdown","id":"cafde0","input":"#### **Logistic Regression**\n\nThis model estimates the probability of an event occurring based on a given set of data. In this case, given the different features in our dataset, this model will estimate the probability of people exiting or not exiting from the bank.\n\n","pos":47,"type":"cell"}
{"cell_type":"markdown","id":"d1b13d","input":"## Customer Churn Prediction\n\n","pos":0,"type":"cell"}
{"cell_type":"markdown","id":"dbe865","input":"##### Importing Required Libraries\n\n","pos":5,"type":"cell"}
{"cell_type":"markdown","id":"e2284e","input":"- The dataset we chose includes multiple variables that describe customers at a bank. Our target is finding whether or not a customer will leave the bank, and our variable for that is Exited, with a value of 1 meaning that the customer has left, and a value of 0 meaning that the customer remains.\n- Through our analysis of the correlation between variables, we found that all of the ones that we didn't remove played a small role in predicting whether or not the customer has exited or will exit \\(as seen in our heat\\-map\\).\n- Some of the variables we chose to analyze through exploratory data analysis were the age of the customer, their estimated salary, balance, tenure,\n  gender, which country they were from, whether they had a credit card or not, how active they were, and the number of products they were utilizing from the bank.\n\n","pos":35,"type":"cell"}
{"cell_type":"markdown","id":"e9e72f","input":"##### Creating a heat\\-map to assess the correlation between our variables.\n\n","pos":16,"type":"cell"}
{"end":1657646014558,"exec_count":75,"id":"584824","input":"fig = px.histogram(churndf, x='Gender', color=\"Exited\", barmode='group')\nfig.show()\nfig.write_html(\"gender,exited.html\")","kernel":"ds_env","output":{"0":{"data":{"iframe":"863e68ee3e7e93f954911679a52ea7347d7486c3"}}},"pos":23,"start":1657646014116,"state":"done","type":"cell"}
{"end":1657646024377,"exec_count":76,"id":"b82f68","input":"fig = px.histogram(churndf, x = 'IsActiveMember', color = 'Exited',barmode='group')\nfig.write_html(\"Active,Exited.html\")","kernel":"ds_env","pos":24,"scrolled":true,"start":1657646024075,"state":"done","type":"cell"}
{"end":1657646142656,"exec_count":83,"id":"99a55a","input":"fig = px.histogram(churndf, x='Geography', color='Exited', barmode='group')\nfig.show()\nfig.write_html(\"geo,exited.html\")","kernel":"ds_env","output":{"0":{"data":{"iframe":"25d043305da73f96583685cb6ebef8a89511f5e3"}}},"pos":25,"start":1657646141867,"state":"done","type":"cell"}
{"id":0,"time":1657644980125,"type":"user"}
{"last_load":1657637208932,"type":"file"}