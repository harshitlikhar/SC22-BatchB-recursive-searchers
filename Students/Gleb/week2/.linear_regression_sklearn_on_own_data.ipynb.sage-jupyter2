{"backend_state":"running","connection_file":"/projects/384affd7-8fb5-487a-a2bf-30e2102843d9/.local/share/jupyter/runtime/kernel-27b8f501-f981-424d-9a47-56badb90d820.json","kernel":"ds_env","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"colab":{"collapsed_sections":[],"name":"linear_regression_sklearn_on_own_data.ipynb","provenance":[]},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.5"}},"trust":true,"type":"settings"}
{"cell_type":"code","end":1657034413982,"exec_count":3,"id":"d225a8","input":"import numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\nimport statistics\n#filename = 'https://raw.githubusercontent.com/mwaskom/seaborn-data/master/mpg.csv'\n#my_data = pd.read_csv(filename) ","kernel":"ds_env","pos":26,"start":1657034410732,"state":"done","type":"cell"}
{"cell_type":"code","end":1657034605551,"exec_count":7,"id":"79d274","input":"# Checking for Missing Data\nif X.shape[0] != y.shape[0]:\n  print(\"It looks like you have missing data. You may want to preprocess your data more with pandas to delete any rows with missing, NaN, N/A, and null values.\")\n  \nidx = np.arange(length) #shuffle our dataset indices so we don't always split the same way!\nnp.random.shuffle(idx)\n\n#split our data with 80% for training (learning) and 20% for testing.\nsplit_threshold = int(length * 0.8)\n\ntrain_idx = idx[:split_threshold]\n# Uses the remaining indices for testing\ntest_idx = idx[split_threshold:]\n\n# Generates train and test sets and formats them for training.\nx_train, y_train = X[train_idx], y[train_idx]\nx_test, y_test = X[test_idx], y[test_idx]\nx_train= x_train.reshape(-1, 1)\ny_train= y_train.reshape(-1, 1)\nx_test = x_test.reshape(-1, 1)","kernel":"ds_env","metadata":{"id":"wKS4pvcEsLOF"},"output":{"0":{"ename":"NameError","evalue":"name 'X' is not defined","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","Input \u001b[0;32mIn [7]\u001b[0m, in \u001b[0;36m<cell line: 2>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[38;5;66;03m# Checking for Missing Data\u001b[39;00m\n\u001b[0;32m----> 2\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[43mX\u001b[49m\u001b[38;5;241m.\u001b[39mshape[\u001b[38;5;241m0\u001b[39m] \u001b[38;5;241m!=\u001b[39m y\u001b[38;5;241m.\u001b[39mshape[\u001b[38;5;241m0\u001b[39m]:\n\u001b[1;32m      3\u001b[0m   \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mIt looks like you have missing data. You may want to preprocess your data more with pandas to delete any rows with missing, NaN, N/A, and null values.\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[1;32m      5\u001b[0m idx \u001b[38;5;241m=\u001b[39m np\u001b[38;5;241m.\u001b[39marange(length) \u001b[38;5;66;03m#shuffle our dataset indices so we don't always split the same way!\u001b[39;00m\n","\u001b[0;31mNameError\u001b[0m: name 'X' is not defined"]}},"pos":15,"start":1657034605533,"state":"done","type":"cell"}
{"cell_type":"code","end":1657035477573,"exec_count":17,"id":"61bb9e","input":"#let's plot our split data to see how it looks!\nplt.figure(figsize=(10,5))\n\n# plot the train set \nplt.subplot(1,2,1)\nplt.scatter(x_train,y_train, c='orange')  \nplt.xlabel('x', fontsize = 20) \nplt.ylabel('y', fontsize = 20)\nplt.title('Generated Data - Train')\nplt.grid('on')\n\n# plot the test set \nplt.subplot(1,2,2)\nplt.scatter(x_test, y_test)  \nplt.xlabel('x', fontsize = 20) \nplt.ylabel('y', fontsize = 20)\nplt.title('Generated Data - Test')\nplt.grid('on')\n\nplt.show()","kernel":"ds_env","metadata":{"id":"6IxwdW5osUDI"},"output":{"0":{"data":{"image/png":"9539d623ac4aa95d0a9c4a2495faa9552dd29630","text/plain":"<Figure size 720x360 with 2 Axes>"},"metadata":{"needs_background":"light"}}},"pos":16,"start":1657035477222,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"2c9120","input":"filename = 'https://raw.githubusercontent.com/mwaskom/seaborn-data/master/mpg.csv'\nmy_data = pd.read_csv(filename) #TODO: read in your file by replacing the filename variable with your file's path. You can also use this current code to work on an automobile dataset! ","metadata":{"id":"mBcweiAXW3bC"},"pos":5,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"35ee1b","input":"print(linr.score(x_test, y_test))","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"CS2KN6gms_io","outputId":"4f865d48-e1ea-4e80-ebb1-869f5f2052b0"},"output":{"0":{"name":"stdout","output_type":"stream","text":"0.5749959307112218\n"}},"pos":23,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"3d1371","input":"my_data.head()","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"2n8n7O_8cUxX","outputId":"b1d56a4f-9c74-4cf0-b1eb-055ea2aab14e"},"output":{"0":{"data":{"text/html":"\n  <div id=\"df-27ad4a61-f8b2-41d4-ac64-4ca80752f8cf\">\n    <div class=\"colab-df-container\">\n      <div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>mpg</th>\n      <th>cylinders</th>\n      <th>displacement</th>\n      <th>horsepower</th>\n      <th>weight</th>\n      <th>acceleration</th>\n      <th>model_year</th>\n      <th>origin</th>\n      <th>name</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>18.0</td>\n      <td>8</td>\n      <td>307.0</td>\n      <td>130.0</td>\n      <td>3504</td>\n      <td>12.0</td>\n      <td>70</td>\n      <td>usa</td>\n      <td>chevrolet chevelle malibu</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>15.0</td>\n      <td>8</td>\n      <td>350.0</td>\n      <td>165.0</td>\n      <td>3693</td>\n      <td>11.5</td>\n      <td>70</td>\n      <td>usa</td>\n      <td>buick skylark 320</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>18.0</td>\n      <td>8</td>\n      <td>318.0</td>\n      <td>150.0</td>\n      <td>3436</td>\n      <td>11.0</td>\n      <td>70</td>\n      <td>usa</td>\n      <td>plymouth satellite</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>16.0</td>\n      <td>8</td>\n      <td>304.0</td>\n      <td>150.0</td>\n      <td>3433</td>\n      <td>12.0</td>\n      <td>70</td>\n      <td>usa</td>\n      <td>amc rebel sst</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>17.0</td>\n      <td>8</td>\n      <td>302.0</td>\n      <td>140.0</td>\n      <td>3449</td>\n      <td>10.5</td>\n      <td>70</td>\n      <td>usa</td>\n      <td>ford torino</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-27ad4a61-f8b2-41d4-ac64-4ca80752f8cf')\"\n              title=\"Convert this dataframe to an interactive table.\"\n              style=\"display:none;\">\n        \n  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n       width=\"24px\">\n    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n  </svg>\n      </button>\n      \n  <style>\n    .colab-df-container {\n      display:flex;\n      flex-wrap:wrap;\n      gap: 12px;\n    }\n\n    .colab-df-convert {\n      background-color: #E8F0FE;\n      border: none;\n      border-radius: 50%;\n      cursor: pointer;\n      display: none;\n      fill: #1967D2;\n      height: 32px;\n      padding: 0 0 0 0;\n      width: 32px;\n    }\n\n    .colab-df-convert:hover {\n      background-color: #E2EBFA;\n      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n      fill: #174EA6;\n    }\n\n    [theme=dark] .colab-df-convert {\n      background-color: #3B4455;\n      fill: #D2E3FC;\n    }\n\n    [theme=dark] .colab-df-convert:hover {\n      background-color: #434B5C;\n      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n      fill: #FFFFFF;\n    }\n  </style>\n\n      <script>\n        const buttonEl =\n          document.querySelector('#df-27ad4a61-f8b2-41d4-ac64-4ca80752f8cf button.colab-df-convert');\n        buttonEl.style.display =\n          google.colab.kernel.accessAllowed ? 'block' : 'none';\n\n        async function convertToInteractive(key) {\n          const element = document.querySelector('#df-27ad4a61-f8b2-41d4-ac64-4ca80752f8cf');\n          const dataTable =\n            await google.colab.kernel.invokeFunction('convertToInteractive',\n                                                     [key], {});\n          if (!dataTable) return;\n\n          const docLinkHtml = 'Like what you see? Visit the ' +\n            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n            + ' to learn more about interactive tables.';\n          element.innerHTML = '';\n          dataTable['output_type'] = 'display_data';\n          await google.colab.output.renderOutput(dataTable, element);\n          const docLink = document.createElement('div');\n          docLink.innerHTML = docLinkHtml;\n          element.appendChild(docLink);\n        }\n      </script>\n    </div>\n  </div>\n  ","text/plain":"    mpg  cylinders  displacement  horsepower  weight  acceleration  \\\n0  18.0          8         307.0       130.0    3504          12.0   \n1  15.0          8         350.0       165.0    3693          11.5   \n2  18.0          8         318.0       150.0    3436          11.0   \n3  16.0          8         304.0       150.0    3433          12.0   \n4  17.0          8         302.0       140.0    3449          10.5   \n\n   model_year origin                       name  \n0          70    usa  chevrolet chevelle malibu  \n1          70    usa          buick skylark 320  \n2          70    usa         plymouth satellite  \n3          70    usa              amc rebel sst  \n4          70    usa                ford torino  "},"exec_count":0,"output_type":"execute_result"}},"pos":6,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"67c8ac","input":"from sklearn.linear_model import LinearRegression\n#Create the model object\nlinr = LinearRegression()\n#Fit (train) the model -- this is where the ML happens!\nlinr.fit(x_train, y_train)\nprint(linr.intercept_, linr.coef_[0])","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"jkPf0bt4a-sV","outputId":"99433807-734f-4a07-fe0a-26b3ad2fb709"},"output":{"0":{"name":"stdout","output_type":"stream","text":"[39.36562799] [-0.15297545]\n"}},"pos":18,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"85eada","input":"#plotting results\nplt.figure(figsize=(10,5))\nplt.plot(x_test, y_hat, '--')\n\nplt.scatter(x_test,y_test, c='orange')  \nplt.xlabel('x', fontsize = 20) \nplt.ylabel('y', fontsize = 20)\nplt.title('Generated Data - Test')\nplt.grid('on')\nplt.show()","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":359},"id":"RarVj0Kor54b","outputId":"c3649dc9-e5f0-4930-f4b1-100ad0987777"},"output":{"0":{"data":{"image/png":"b183aad68e9d92822d562b2d62bac4ab20c205c4","text/plain":"<Figure size 720x360 with 1 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"}},"pos":21,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"98ef76","input":"X = my_data[\"horsepower\"].to_numpy()\ny = my_data[\"mpg\"].to_numpy()","metadata":{"id":"WW77IzOwZaKp"},"pos":11,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"b41aff","input":"# import libraries \nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\nimport statistics","metadata":{"id":"IecuRdF1a-sG"},"pos":1,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"cc5849","input":"sns.heatmap(my_data.corr())","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":344},"id":"H7FyJo_QutAX","outputId":"d1ad6159-df64-4882-e2ae-d78cfa814cc5"},"output":{"0":{"data":{"text/plain":"<matplotlib.axes._subplots.AxesSubplot at 0x7f145260ae90>"},"exec_count":0,"output_type":"execute_result"},"1":{"data":{"image/png":"2608aca97f140c66d79a1201aa96d93a3a828437","text/plain":"<Figure size 432x288 with 2 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"}},"pos":9,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"de3519","input":"# Predicting using SKLearn\ny_hat = linr.predict(x_test)","metadata":{"id":"o9ZDJB1qrJ7_"},"pos":20,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"f73ed5","input":"MAE = np.mean(abs(y_test - y_hat))\nMAE","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"osxC5vVotKWS","outputId":"aa7e2d67-12af-4389-e7e0-4c23b23e8bf4"},"output":{"0":{"data":{"text/plain":"7.756195456791836"},"exec_count":0,"output_type":"execute_result"}},"pos":24,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"fb22ae","input":"#cleaning the data -- dropping missing and duplicate values for sanity\nmy_data.dropna(inplace = True)\nmy_data.drop_duplicates(inplace = True)\nmy_data = my_data.reset_index(drop=True)\n\nlength = len(my_data.index) #save length of array of later","metadata":{"id":"BYHvay0xa-sK"},"pos":7,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"15d929","input":"np docs - https://numpy.org/doc/stable/reference/index.html#reference\n\n","pos":14,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"2d9de2","input":"### Getting to know the problem\n\nFor my data, my columns inlude `'mpg', 'cylinders', 'displacement', 'horsepower', 'weight', 'acceleration', 'model_year', 'origin', and 'name'`. \n\nTo start, I would like to create a linear regression model that uses horsepower (X) to predict miles per gallon (y) and see how strong our linear regression model is. For your data, you should choose two columns as well to represent X and y.\n","metadata":{"id":"w78dUshNZarz"},"pos":10,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"315c18","input":"Read in your data into a pandas dataframe by replacing the `filename` variable with your file's path. You can also use the current code below to work on a mpg dataset, where the target variable we are predicting is **miles per gallon** based on other car features. \n\n> We should choose two columns that we want to run regresssion on. Use the `.head()` function to decide which columns would be best!\n\n","metadata":{"id":"m4-2ySg9W0Fw"},"pos":3,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"580c0c","input":"### Results and Evaluation\nOne way to see if the model is pretty good is the coefficient of determination (R^2) using the `score()` function. You can read about it here: https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.LinearRegression.html#sklearn.linear_model.LinearRegression.score.\n\nAnother way is to compare our mean absolute error (MAE). MAE measures the prediction error. Mathematically, it is the average absolute difference between observed and predicted outcomes, MAE = mean(abs(observeds - predicteds)). MAE is less sensitive to outliers compared to RMSE.\n\nRead some more about regression model metrics [here](http://www.sthda.com/english/articles/38-regression-model-validation/158-regression-model-accuracy-metrics-r-square-aic-bic-cp-and-more/).","metadata":{"id":"14TdY4RGr-RG"},"pos":22,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"58db24","input":"### Split the data\nOur model should ignore 20% of data points to use for testing so it doesn't just memorize the data. We need to make sure there are no missing data points before continuing.","metadata":{"id":"g5Zk8_6ksLur"},"pos":13,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"62e5a3","input":"# Linear regression using SKLearn on your own Data!\nThis should look familiar... we now are going to use linear regression on some of our own features. I recommend walking through the code below first, then importing your dataset and working through the same problem with your data!","metadata":{"id":"K_X2fB9ta-rv"},"pos":0,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"716023","input":"# Data Loading, Cleaning, and Setup\n\n","metadata":{"id":"JlrQHpg8a-sI"},"pos":2,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"7e38ab","input":"pandas docs - https://pandas.pydata.org/docs/reference/index.html#api <br>\nseaborn docs - https://seaborn.pydata.org/api.html\n\n","pos":4,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"b5e515","input":"Linear regression naturally works best on highly correlated data, so I'm going to create a heatmap to see which variables are correlated! ","metadata":{"id":"J3L_hb0Ou4sn"},"pos":8,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"bd3150","input":"# Linear Regression with Scikit-learn's linear regression\n\nWe can use Scikit-Learn’s Linear Regression to fit the model. Most other models we will use in the course \n\nhttps://scikit-learn.org/stable/modules/generated/sklearn.linear_model.LinearRegression.html\n\n","metadata":{"id":"cbeaQMpna-sR"},"pos":12,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"d7e86a","input":"# Repeat the process!\n\nTry running linear regression on multiple combinations of features (columns) on your dataset. What combination yields the best score? How does this connect to your correlation chart? \n\n","metadata":{"id":"2OixzlOot-U6"},"pos":25,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"e96830","input":"### Creating Predictions\nPredict outputs on our x_test data that we held out. Think of this as a way to see how the model does on new data!","metadata":{"id":"QFb-_EiFrvzQ"},"pos":19,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"f03049","input":"### Creating and Fitting","metadata":{"id":"e1m-wKeYsFEl"},"pos":17,"state":"done","type":"cell"}
{"end":1657034490720,"exec_count":5,"id":"62c2df","input":"my_data.head()","kernel":"ds_env","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>mpg</th>\n      <th>cylinders</th>\n      <th>displacement</th>\n      <th>horsepower</th>\n      <th>weight</th>\n      <th>acceleration</th>\n      <th>model_year</th>\n      <th>origin</th>\n      <th>name</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>18.0</td>\n      <td>8</td>\n      <td>307.0</td>\n      <td>130.0</td>\n      <td>3504</td>\n      <td>12.0</td>\n      <td>70</td>\n      <td>usa</td>\n      <td>chevrolet chevelle malibu</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>15.0</td>\n      <td>8</td>\n      <td>350.0</td>\n      <td>165.0</td>\n      <td>3693</td>\n      <td>11.5</td>\n      <td>70</td>\n      <td>usa</td>\n      <td>buick skylark 320</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>18.0</td>\n      <td>8</td>\n      <td>318.0</td>\n      <td>150.0</td>\n      <td>3436</td>\n      <td>11.0</td>\n      <td>70</td>\n      <td>usa</td>\n      <td>plymouth satellite</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>16.0</td>\n      <td>8</td>\n      <td>304.0</td>\n      <td>150.0</td>\n      <td>3433</td>\n      <td>12.0</td>\n      <td>70</td>\n      <td>usa</td>\n      <td>amc rebel sst</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>17.0</td>\n      <td>8</td>\n      <td>302.0</td>\n      <td>140.0</td>\n      <td>3449</td>\n      <td>10.5</td>\n      <td>70</td>\n      <td>usa</td>\n      <td>ford torino</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"    mpg  cylinders  displacement  horsepower  weight  acceleration  \\\n0  18.0          8         307.0       130.0    3504          12.0   \n1  15.0          8         350.0       165.0    3693          11.5   \n2  18.0          8         318.0       150.0    3436          11.0   \n3  16.0          8         304.0       150.0    3433          12.0   \n4  17.0          8         302.0       140.0    3449          10.5   \n\n   model_year origin                       name  \n0          70    usa  chevrolet chevelle malibu  \n1          70    usa          buick skylark 320  \n2          70    usa         plymouth satellite  \n3          70    usa              amc rebel sst  \n4          70    usa                ford torino  "},"exec_count":5}},"pos":28,"start":1657034490676,"state":"done","type":"cell"}
{"end":1657034566924,"exec_count":6,"id":"15ebc2","input":"my_data.tail()","kernel":"ds_env","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>mpg</th>\n      <th>cylinders</th>\n      <th>displacement</th>\n      <th>horsepower</th>\n      <th>weight</th>\n      <th>acceleration</th>\n      <th>model_year</th>\n      <th>origin</th>\n      <th>name</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>393</th>\n      <td>27.0</td>\n      <td>4</td>\n      <td>140.0</td>\n      <td>86.0</td>\n      <td>2790</td>\n      <td>15.6</td>\n      <td>82</td>\n      <td>usa</td>\n      <td>ford mustang gl</td>\n    </tr>\n    <tr>\n      <th>394</th>\n      <td>44.0</td>\n      <td>4</td>\n      <td>97.0</td>\n      <td>52.0</td>\n      <td>2130</td>\n      <td>24.6</td>\n      <td>82</td>\n      <td>europe</td>\n      <td>vw pickup</td>\n    </tr>\n    <tr>\n      <th>395</th>\n      <td>32.0</td>\n      <td>4</td>\n      <td>135.0</td>\n      <td>84.0</td>\n      <td>2295</td>\n      <td>11.6</td>\n      <td>82</td>\n      <td>usa</td>\n      <td>dodge rampage</td>\n    </tr>\n    <tr>\n      <th>396</th>\n      <td>28.0</td>\n      <td>4</td>\n      <td>120.0</td>\n      <td>79.0</td>\n      <td>2625</td>\n      <td>18.6</td>\n      <td>82</td>\n      <td>usa</td>\n      <td>ford ranger</td>\n    </tr>\n    <tr>\n      <th>397</th>\n      <td>31.0</td>\n      <td>4</td>\n      <td>119.0</td>\n      <td>82.0</td>\n      <td>2720</td>\n      <td>19.4</td>\n      <td>82</td>\n      <td>usa</td>\n      <td>chevy s-10</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"      mpg  cylinders  displacement  horsepower  weight  acceleration  \\\n393  27.0          4         140.0        86.0    2790          15.6   \n394  44.0          4          97.0        52.0    2130          24.6   \n395  32.0          4         135.0        84.0    2295          11.6   \n396  28.0          4         120.0        79.0    2625          18.6   \n397  31.0          4         119.0        82.0    2720          19.4   \n\n     model_year  origin             name  \n393          82     usa  ford mustang gl  \n394          82  europe        vw pickup  \n395          82     usa    dodge rampage  \n396          82     usa      ford ranger  \n397          82     usa       chevy s-10  "},"exec_count":6}},"pos":29,"start":1657034566906,"state":"done","type":"cell"}
{"end":1657034631947,"exec_count":8,"id":"6f1a0e","input":"my_data.dropna(inplace = True)\nmy_data.drop_duplicates(inplace = True)\nmy_data = my_data.reset_index(drop=True)\n\nlength = len(my_data.index)","kernel":"ds_env","pos":30,"start":1657034631935,"state":"done","type":"cell"}
{"end":1657035444684,"exec_count":14,"id":"9b8f62","input":"if X.shape[0] != y.shape[0]:\n    print(\"It looks like you have missing data. You may want to preprocess your data more with pandas to delete any rows with missing, NaN, N/A, and null values.\")\nidx = np.arange(length) #shuffle our dataset indices so we don't always split the same way!\nnp.random.shuffle(idx)\n\n#split our data with 80% for training (learning) and 20% for testing.\nsplit_threshold = int(length * 0.8)\n\ntrain_idx = idx[:split_threshold]\n# Uses the remaining indices for testing\ntest_idx = idx[split_threshold:]\n\n# Generates train and test sets and formats them for training.\nx_train, y_train = X[train_idx], y[train_idx]\nx_test, y_test = X[test_idx], y[test_idx]\nx_train= x_train.reshape(-1, 1)\ny_train= y_train.reshape(-1, 1)\nx_test = x_test.reshape(-1, 1)","kernel":"ds_env","pos":34,"start":1657035444680,"state":"done","type":"cell"}
{"end":1657035448052,"exec_count":15,"id":"ccfcc0","input":"from sklearn.linear_model import LinearRegression\n#Create the model object\nlinr = LinearRegression()\n#Fit (train) the model -- this is where the ML happens!\nlinr.fit(x_train, y_train)\nprint(linr.intercept_, linr.coef_[0])","kernel":"ds_env","output":{"0":{"name":"stdout","text":"[46.6132729] [-0.00775566]\n"}},"pos":35,"start":1657035447971,"state":"done","type":"cell"}
{"end":1657035468255,"exec_count":16,"id":"3b6f09","input":"#let's plot our split data to see how it looks!\nplt.figure(figsize=(10,5))\n\n# plot the train set \nplt.subplot(1,2,1)\nplt.scatter(x_train,y_train, c='orange')  \nplt.xlabel('x', fontsize = 20) \nplt.ylabel('y', fontsize = 20)\nplt.title('Generated Data - Train')\nplt.grid('on')\n\n# plot the test set \nplt.subplot(1,2,2)\nplt.scatter(x_test, y_test)  \nplt.xlabel('x', fontsize = 20) \nplt.ylabel('y', fontsize = 20)\nplt.title('Generated Data - Test')\nplt.grid('on')\n\nplt.show()","kernel":"ds_env","output":{"0":{"data":{"image/png":"9539d623ac4aa95d0a9c4a2495faa9552dd29630","text/plain":"<Figure size 720x360 with 2 Axes>"},"metadata":{"needs_background":"light"}}},"pos":36,"start":1657035467879,"state":"done","type":"cell"}
{"end":1657035499404,"exec_count":18,"id":"616c00","input":"y_hat = linr.predict(x_test)","kernel":"ds_env","pos":37,"start":1657035499393,"state":"done","type":"cell"}
{"end":1657035514255,"exec_count":19,"id":"1f3c94","input":"plt.figure(figsize=(10,5))\nplt.plot(x_test, y_hat, '--')\n\nplt.scatter(x_test,y_test, c='orange')  \nplt.xlabel('x', fontsize = 20) \nplt.ylabel('y', fontsize = 20)\nplt.title('Generated Data - Test')\nplt.grid('on')\nplt.show()","kernel":"ds_env","output":{"0":{"data":{"image/png":"56f5faef1e8daed3fe113150dca55f15dd05f4d0","text/plain":"<Figure size 720x360 with 1 Axes>"},"metadata":{"needs_background":"light"}}},"pos":38,"start":1657035514048,"state":"done","type":"cell"}
{"end":1657035556414,"exec_count":20,"id":"48db2c","input":"print(linr.score(x_test, y_test))","kernel":"ds_env","output":{"0":{"name":"stdout","text":"0.7194710189497779\n"}},"pos":39,"start":1657035556405,"state":"done","type":"cell"}
{"end":1657035579277,"exec_count":21,"id":"82045b","input":"MAE = np.mean(abs(y_test - y_hat))\nMAE","kernel":"ds_env","output":{"0":{"data":{"text/plain":"7.753752870579603"},"exec_count":21}},"pos":40,"start":1657035579265,"state":"done","type":"cell"}
{"end":1657041157804,"exec_count":28,"id":"5c6797","input":"if X.shape[0] != y.shape[0]:\n    print(\"It looks like you have missing data. You may want to preprocess your data more with pandas to delete any rows with missing, NaN, N/A, and null values.\")\nidx = np.arange(length) #shuffle our dataset indices so we don't always split the same way!\nnp.random.shuffle(idx)\n\n#split our data with 80% for training (learning) and 20% for testing.\nsplit_threshold = int(length * 0.8)\n\ntrain_idx = idx[:split_threshold]\n# Uses the remaining indices for testing\ntest_idx = idx[split_threshold:]\n\n# Generates train and test sets and formats them for training.\nx_train, y_train = X[train_idx], y[train_idx]\nx_test, y_test = X[test_idx], y[test_idx]\n","kernel":"ds_env","pos":42,"start":1657041157797,"state":"done","type":"cell"}
{"end":1657041167773,"exec_count":29,"id":"97fb99","input":"from sklearn.linear_model import LinearRegression\n#Create the model object\nlinr = LinearRegression()\n#Fit (train) the model -- this is where the ML happens!\nlinr.fit(x_train, y_train)\nprint(linr.intercept_, linr.coef_[0])","kernel":"ds_env","output":{"0":{"name":"stdout","text":"45.172480847917015 -0.005804532930323974\n"}},"pos":43,"start":1657041167744,"state":"done","type":"cell"}
{"end":1657041312919,"exec_count":31,"id":"b8aebe","input":"y_hat = linr.predict(x_test)","kernel":"ds_env","pos":44,"start":1657041312906,"state":"done","type":"cell"}
{"end":1657041319050,"exec_count":32,"id":"1bfaea","input":"y_hat","kernel":"ds_env","output":{"0":{"data":{"text/plain":"array([ 7.9567829 , 25.78074675, 14.44786713, 30.08953564, 21.44694155,\n       11.42265498, 15.22038553,  8.33804578, 24.23385573,  9.58263336,\n       31.83841767, 12.49527064, 29.07986347, 24.7725876 , 15.36485193,\n       11.69506263, 29.38916605, 27.02097374, 31.12057844, 29.38807789,\n       15.94811621, 25.7536817 , 31.81686371, 17.09909475, 25.96948535,\n       29.63744768, 25.61222937, 24.15947117, 28.12533421, 23.76991901,\n       23.6123653 , 26.11411747, 32.82966083, 30.77239943, 20.11023848,\n       26.99771793, 20.912428  , 23.24351893, 28.30414584, 12.23754325,\n       18.7612249 , 27.48711295, 18.91606211, 12.61174803, 25.93922444,\n       26.83088493, 25.65700146, 14.92280366, 30.8872526 , 29.14924051,\n       24.42976851, 26.55707591,  9.26473579, 24.09460146, 15.75205486,\n       25.02449513, 23.90407172, 16.61145794, 21.66685004, 19.80823553,\n       25.42136331, 29.62898148, 28.99819125, 16.36711695, 29.3433954 ,\n       32.43987051, 28.75054015, 24.42760781, 27.46474223, 23.25535084,\n       30.47465107, 10.03653558, 31.09784075, 22.55268548, 32.37483768,\n       26.40630173, 19.60419179, 17.02693993, 19.98296284])"},"exec_count":32}},"pos":45,"start":1657041319036,"state":"done","type":"cell"}
{"end":1657041469090,"exec_count":35,"id":"5b08e8","input":"print(linr.score(x_test, y_test))","kernel":"ds_env","output":{"0":{"name":"stdout","text":"0.7039339011457451\n"}},"pos":46,"start":1657041469086,"state":"done","type":"cell"}
{"end":1657041478802,"exec_count":36,"id":"24d08e","input":"MAE = np.mean(abs(y_test - y_hat))\nMAE","kernel":"ds_env","output":{"0":{"data":{"text/plain":"3.137495119075444"},"exec_count":36}},"pos":46.5,"start":1657041478774,"state":"done","type":"cell"}
{"end":1657041901961,"exec_count":37,"id":"9fefa6","input":"filename = 'https://raw.githubusercontent.com/mwaskom/seaborn-data/master/mpg.csv'\nmy_data = pd.read_csv(filename) ","kernel":"ds_env","pos":27,"start":1657041901886,"state":"done","type":"cell"}
{"exec_count":13,"id":"f0605c","input":"X = my_data[\"weight\"].to_numpy()\ny = my_data[\"mpg\"].to_numpy()","kernel":"ds_env","pos":32,"state":"done","type":"cell"}
{"exec_count":24,"id":"3b0a82","input":"X = my_data[[\"weight\",\"acceleration\",\"model_year\"]].to_numpy()\ny = my_data[\"mpg\"].to_numpy()","kernel":"ds_env","pos":41,"state":"done","type":"cell"}
{"exec_count":9,"id":"7bf2a7","input":"sns.heatmap(my_data.corr())","kernel":"ds_env","output":{"0":{"data":{"text/plain":"<AxesSubplot:>"},"exec_count":9},"1":{"data":{"image/png":"1fbc5dbc585e3bc5fa7bcdf0f4c98be0c1eba666","text/plain":"<Figure size 432x288 with 2 Axes>"},"metadata":{"needs_background":"light"}}},"pos":31,"state":"done","type":"cell"}
{"id":"52d4e6","input":"","pos":47,"type":"cell"}
{"id":"8027fb","input":"#PRedict mpg from any other info \n","pos":33,"type":"cell"}
{"id":0,"time":1657041873170,"type":"user"}
{"last_load":1657032267162,"type":"file"}